<?php
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */

namespace PrestaShopBundle\Entity\Repository;

use Doctrine\ORM\Query\Expr\Join;
use PrestaShop\PrestaShop\Core\Domain\Product\AttributeGroup\ValueObject\AttributeGroupId;
use PrestaShop\PrestaShop\Core\Domain\Shop\Exception\InvalidShopConstraintException;
use PrestaShop\PrestaShop\Core\Domain\Shop\Exception\ShopAssociationNotFound;
use PrestaShop\PrestaShop\Core\Domain\Shop\ValueObject\ShopConstraint;
use PrestaShop\PrestaShop\Core\Domain\Shop\ValueObject\ShopId;

/**
 * AttributeGroupRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttributeGroupRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param bool $withAttributes
     * @param int[] $attributeIds
     *
     * @return array
     */
    public function listOrderedAttributeGroups(bool $withAttributes, ShopConstraint $shopConstraint, array $attributeIds = []): array
    {
        if ($shopConstraint->getShopGroupId()) {
            throw new InvalidShopConstraintException('Shop Group constraint is not supported');
        }

        $qb = $this
            ->createQueryBuilder('ag')
            ->addSelect('ag')
            ->addSelect('agl')
            ->innerJoin('ag.attributeGroupLangs', 'agl')
            ->addOrderBy('ag.position', 'ASC')
        ;

        // for single shop we add join condition with certain shop,
        // else if its all shops we should be ok by retrieving results from general attribute_group table
        if ($shopConstraint->getShopId()) {
            $qb->innerJoin('ag.shops', 'ags')
                ->where('ags.id = :shopId')
                ->setParameter('shopId', $shopConstraint->getShopId()->getValue())
            ;
        }

        if (!empty($attributeIds)) {
            $qb
                ->innerJoin('ag.attributes', 'a', Join::WITH, 'a.id IN (:attributeIds)')
                ->setParameter('attributeIds', $attributeIds)
            ;
        } else {
            $qb->innerJoin('ag.attributes', 'a');
        }

        if ($withAttributes) {
            $qb
                ->innerJoin('a.attributeLangs', 'al')
                ->addSelect('a')
                ->addSelect('al')
                ->addOrderBy('a.position', 'ASC')
            ;
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Asserts that attribute groups exists in all the provided shops.
     * If at least one of them is missing in any shop, it throws exception.
     *
     * @param AttributeGroupId[] $attributeGroupIds
     * @param ShopId[] $shopIds
     *
     * @throws ShopAssociationNotFound
     */
    public function assertExistsInEveryShop(array $attributeGroupIds, array $shopIds): void
    {
        $attributeGroupIdValues = array_map(static function (AttributeGroupId $attributeGroupId): int {
            return $attributeGroupId->getValue();
        }, $attributeGroupIds);

        $shopIdValues = array_map(static function (ShopId $shopId): int {
            return $shopId->getValue();
        }, $shopIds);

        $qb = $this->createQueryBuilder('ag');
        $results = $qb
            ->select('COUNT(ag.id) AS attribute_group_count', 'ags.id AS shop_id')
            ->innerJoin('ag.shops', 'ags', Join::WITH, $qb->expr()->in('ags.id', ':shopIds'))
            ->where($qb->expr()->in('ag.id', $attributeGroupIdValues))
            ->setParameter('shopIds', $shopIdValues)
            ->groupBy('ags.id')
            ->getQuery()
            ->getArrayResult()
        ;

        $expectedAttributeGroupCount = count($attributeGroupIdValues);

        foreach ($results as $result) {
            if ((int) $result['attribute_group_count'] === $expectedAttributeGroupCount) {
                continue;
            }

            throw new ShopAssociationNotFound('Provided attribute groups does not exist in every shop');
        }
    }
}
